import java.util.ArrayList;

public class BusinessLead extends BusinessEmployee {
    public int headCount;
    public ArrayList<Accountant> team2;

    public BusinessLead(String name) {
        super(name);
        this.baseSalary *= getBaseSalary()*2;
        this.headCount = 10;
        this.team2 = new ArrayList<Accountant>();
    }

    public boolean hasHeadCount() {
        if (team2.size() < headCount) {
            return true;
        } else {
            return false;
        }
    }

    public boolean addReport(Accountant e, TechnicalLead supportTeam) {
        if (hasHeadCount()) {
            team2.add(e);
            e.setManager(this);
            this.bonusBudget += e.baseSalary*1.1;
            e.supportTeam(supportTeam);
            supportTeam.accountantSupport=e;
            return true;
        } else {
            return false;
        }
    }

    public boolean requestBonus(Employee e, double bonus) {
        // Should check if the bonus amount requested would fit in current BusinessLead's budget.
        // If it is, that employee should get that bonus, the BusinessLeader's budget should be deducted and true should be returned.
        // False should be returned otherwise
        if (bonus<=this.getBonusBudget()) {
            this.bonusBudget -= bonus;
            e.bonusBudget += bonus;
            return true;
        } else {
            return false;
        }
    }

    public boolean approveBonus(Employee e, double bonus) {
        // This function should look through the Accountants the BusinessLead manages, and if any of them are supporting a the TechnicalLead that is
        // the manager of the Employee passed in then the Accountant's budget should be consulted to see if the bonus could be afforded.
        // If the team can afford the bonus it should be rewarded and true returned, false otherwise.

        for (int i=0; i<team2.size();i++) {
            if ((team2.get(i).getTeamSupported()).equals(e.manager) && team2.get(i).approveBonus(bonus)) {
                e.bonusBudget += bonus;
                team2.get(i).bonusBudget -= bonus;
                return true;
            }
        }
        return false;
    }

    public String getTeamStatus(){

        if (team2.size()==0){
            return this.employeeStatus()+ " and no direct reports yet";
        } else {
            String teamStatus="";
            for (int i=0;i < team2.size();i++) {
                teamStatus += ("   "+team2.get(i).employeeStatus()+"\n");
            }
            return this.employeeStatus()+" and is managing: \n"+teamStatus;

        }
    }
}
